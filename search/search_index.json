{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"00-introduction/","title":"Introduction","text":""},{"location":"00-introduction/#introduction","title":"Introduction","text":"<p>Welcome to the How to improve customer interactions with video and AI hands-on lab!</p> <p></p>"},{"location":"00-introduction/#objectives","title":"Objectives","text":"<p>At the end of this lab, you should be able to build a Webex Connect flow, ready to be used for a real business use case.</p> <p></p> <p>In the process, you will:</p> <ul> <li> <p>Learn about Instant Connect and APIs</p> </li> <li> <p>Learn advanced Webex Connect integration and messaging capabilities</p> </li> <li> <p>Learn how to build a Webex AI Agent</p> </li> </ul>"},{"location":"01-overview/","title":"Instant Connect overview","text":""},{"location":"01-overview/#webex-instant-connect-overview","title":"Webex Instant Connect Overview","text":"<p>Webex Instant Connect empowers organizations across all verticals to enhance customer service, by facilitating video communications between end-users and experts. There is no need to download or install any application or plugin, customers and experts can connect directly through a web browser on desktop or mobile devices.</p> <p></p> <p>The Webex Instant Connect API provides the flexibility to schedule these sessions from external backends like Customer-Managed Relationship Systems (CRMs) and Electronic Medical Records (EMR) portals. Communication is highly secure, ensuring that no private information is collected at any point.</p> <p>As a fully flexible platform, Webex Instant Connect can be utilized for B2C meetings in any industry. It also provides relevant functionalities in healthcare, including in-patient tele-consultation, hourly virtual rounding, family visitation, and others.</p> <p>For more information, visit:</p> <ul> <li> <p>Webex Instant Connect</p> </li> <li> <p>Webex Instant Connect @ Webex Help Center</p> </li> </ul>"},{"location":"02-activation-OLD/","title":"Webex Instant Connect configuration","text":""},{"location":"02-activation-OLD/#webex-instant-connect-configuration","title":"Webex Instant Connect configuration","text":"<p>Log in https://instant.webex.com as a Webex administrator in your Webex ORG, and:</p> <ol> <li> <p>Click on Begin Integration</p> </li> <li> <p>Click on Activate Instant Connect:</p> </li> </ol> <p></p> <p>Now we are ready to learn how to use Webex Instant Connect API!</p> <p>Note: Remember that you need to use a Guest-to-Guest Webex Meeting site, as described in this lab Introduction</p> <p>You can also configure Instant Connect appearance by adding your organization name and logo. For this healthcare example:</p> <ol> <li> <p>Go to Appearance, change the Organization Name. You can use, for example, 'Wellness Hospital'. </p> </li> <li> <p>Click on Change Logo, and use the pictures provided: small and big.</p> </li> </ol> <p></p> <ol> <li> <p>Log in Control Hub as an administrator, and click on Apps</p> </li> <li> <p>Select Service Apps, you should see a Service App named 'Instant Connect Service App' listed. Enable it by clicking on the Authorize toggle switch. If you have more than one webex site in your org, choose in what site you want to authorize the Service App</p> </li> <li> <p>Click on Save</p> </li> </ol>"},{"location":"02-activation/","title":"Instant Connect configuration","text":""},{"location":"02-activation/#webex-instant-connect-configuration","title":"Webex Instant Connect configuration","text":"<ol> <li> <p>Open a browser and, go to the Instant Connect main page and Click on Begin Integration.</p> </li> <li> <p>Log in as a Webex administrator in your Webex Meetings Guest-2-Guest organization with the lab credentials provided.</p> </li> <li> <p>Check that Instant Connect is activated.</p> <p>Now we are ready to use the Webex Instant Connect API! In this lab you will learn how to do it both manually,  and also automatically using Webex Connect.</p> <p>You can also configure Instant Connect appearance by adding your organization name and logo. This has been already done for you, have a look:</p> </li> <li> <p>Go to Appearance, here is where you could change the Organization Name, the logo, and the label used for the expert/host and the customer/participant:</p> <p></p> </li> <li> <p>Go to Feature Customization. Here, you can enable or disable some of the features for your meetings with only one click, making Instant Connect a flexible and easy-to-customize solution:</p> <p></p> </li> </ol> <p>Do not change any of these options for now.</p>"},{"location":"03-instantconnectapi/","title":"Instant Connect API","text":""},{"location":"03-instantconnectapi/#instant-connect-api","title":"Instant Connect API","text":"<p>Now, let's build the Instant Connect (IC) meeting links programmatically.</p>"},{"location":"03-instantconnectapi/#get-an-access-token","title":"Get an Access Token","text":"<p>You will need a Webex API access token to make calls to the IC API. You have two options:</p> <ul> <li> <p>Your personal token for development purposes.</p> </li> <li> <p>A bot token for production use.</p> </li> </ul> <p>In this lab we will use a bot token.</p>"},{"location":"03-instantconnectapi/#create-your-bot","title":"Create your BOT","text":"<ol> <li> <p>Go to Webex Developer Portal, log in as a Webex administrator in your Webex Meetings Guest-2-Guest organization with the lab credentials provided, and click on Create a Bot.</p> </li> <li> <p>Select a unique Bot name (for example 'Video Expert PODX' where X is your POD number), and an icon of your choice. </p> </li> <li> <p>Choose your bot username, this has to be unique. For example, you could do something 'lab-wx1-PODX', where X is your POD number.</p> </li> <li> <p>App Hub Description: we won't be publishing this bot to App Hub, but it is a good practice to add a meaningful description that will help you remember the purpose of the bot. For example, you can type something like 'This is the bot used for my wx1 lab 2857'</p> </li> <li> <p>Click on Add Bot and Copy your token!! to a safe place, we will use later:</p> </li> </ol> <p></p>"},{"location":"03-instantconnectapi/#create-the-meeting-links","title":"Create the Meeting Links","text":"<p>This section will provide meeting links for host (expert) and guest (end customer) users. You can use curl for this:</p> <ol> <li> <p>Open a text editor.</p> </li> <li> <p>Copy this CURL request:</p> <pre><code>curl --location 'https://mtg-broker-a.wbx2.com/api/v2/joseencrypt' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer YOUR_BOT_TOKEN_HERE' \\\n--data '{\n    \"jwt\": {\n        \"sub\": \"Instant Connect Meeting 5\"\n    },\n    \"aud\": \"a4d886b0-979f-4e2c-a958-3e8c14605e51\",\n    \"provideShortUrls\": true,\n    \"verticalType\": \"hc\",\n    \"loginUrlForHost\": false\n}'\n</code></pre> <p>Body details:</p> <ul> <li> <p><code>sub</code> (Subject) string value can be whatever you like as long as it is unique for each meeting.</p> </li> <li> <p><code>aud</code> indicates the audience for which the jwt is intended. In this case it is Cisco, and the value is always the same.</p> </li> <li> <p><code>jwt</code> with <code>sub</code> and <code>aud</code> are mandatory parameters, the rest are optional.</p> </li> <li> <p><code>provideShortUrls</code>: Default: <code>false</code>. If set to <code>true</code>, the response will have shortened data portions of the meeting URL. It will also contain a shortened base URL, you will learn later how to use this data.</p> </li> <li> <p><code>verticalType</code>: Default: <code>hc</code>. Currently takes two values, <code>gen</code> for general flow, and <code>hc</code> for healthcare flow.</p> </li> <li> <p><code>loginUrlForHost</code>: Default <code>true</code>. Relevant only if <code>provideShortUrls</code> is true. If set to <code>false</code>, the short URL for hosts will be non-login links which means the host won't have an option to login for the meeting.</p> </li> </ul> </li> <li> <p>Now you can import the CURL request into Bruno, Postman, or httpie. To do it with httpie, open a browser tab and go to https://httpie.io/app. Close the popup.</p> </li> <li> <p>Go to the API Request URL field:</p> <p></p> <p>and paste the CURL request copied previously. This should import the curl request into httpie. Click on Update</p> </li> <li> <p>Click on Auth and replace YOUR_BOT_TOKEN_HERE with your Bot Token. Now click on Send:</p> <p></p> <p>The API response should be something like this:</p> <pre><code>{\n    \"host\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJpNmZta3dp...cWl3ZGw2cjFuSkg0bEUj\",\n            \"short\": \"oCVp2LD\"\n        }\n    ],\n    \"guest\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJEQVdaHOBS...RDTvlZ-aLLRdIMSmCwEc\",\n            \"short\": \"ckmNR7I\"\n        }\n    ],\n    \"baseUrl\": \"https://instant.webex.com/visit/\"\n}\n</code></pre> <p>Note: Response has been formatted to make the documentation more understandable</p> </li> </ol>"},{"location":"03-instantconnectapi/#construct-the-meeting-urls","title":"Construct the Meeting URLs","text":"<p>Forming the meeting links is as simple as taking the <code>baseUrl</code> value and concatenating the values in <code>short</code>.</p> <p>In this example, <code>https://instant.webex.com/visit/oCVp2LD</code> for the host and <code>https://instant.webex.com/visit/ckmNR7I</code> for the guest.</p> <p>Now you only need to share the host URL with the expert providing support, and the guest URL with the end customer asking for support !!</p> <p>This can be done by email, SMS, be integrated into some web portal, CRM, EMR, etc. In the next steps, you will learn how to do it in a digital channel like SMS using Webex Connect.</p>"},{"location":"04-ai-agent-create/","title":"Building your Webex AI Agent","text":""},{"location":"04-ai-agent-create/#building-your-ai-agent","title":"Building your AI Agent","text":"<p>In this section you will learn how to create an Autonomous Webex AI Agent.</p>"},{"location":"04-ai-agent-create/#agent-creation","title":"Agent Creation","text":"<ol> <li> <p>Log in Control Hub (https://admin.webex.com) with you Webex Contact Center tenant administrator credentials, go to Services, Contact Center:</p> <p></p> <p>In the Quick Links section on the right, click on Webex AI Agent to access the AI Agent Studio.</p> </li> <li> <p>Click Create agent, Start from scratch and Next. Choose Autonomous.</p> </li> <li> <p>Name your agent <code>PODX-AIAgent</code>, where X is your POD number. Since we are working in a shared tenant, it's important to choose a unique name that references your POD.</p> <p>You do not need to change the System ID, and for AI engine choose the default Webex AI Pro 1.0.</p> </li> <li> <p>Agent's goal. Use this:</p> <pre><code>Assist users with booking doctor appointments by efficiently guiding them through the necessary steps.\nFor booking, ensure availability is checked first and gather required details (date, time, patient information). \n</code></pre> <p>And click Create.</p> </li> <li> <p>AI Agent Welcome message. Change it to something like:</p> <pre><code>Hi there, how can I help you?\n</code></pre> </li> </ol>"},{"location":"04-ai-agent-create/#agent-instructions","title":"Agent Instructions","text":"<p>This is one of the most important steps in the lab. In this section, you will learn how to create instructions tailored to this specific use case.</p> <p>Paste this text in the Instructions text box:</p> <pre><code>## 1. Identity\n**Role Definition**: You are a friendly and professional assistant for managing doctor appointments.\n**Tone and Demeanour**: Maintain a polite and empathetic tone while assisting users.\n\n## 2. Context\n**Background Information:** Users can only request to book video appointments. Each action depends on specific steps to ensure smooth execution.\n\n## 3. Task\n**Booking a video Appointment:**\n1.  Check Availability:\n- Ask for the [podId] first. Do not ask for the preferred time in the same message. Let the customer know that you expect it to be in this format: PODX\n- Ask for the preferred date and time.\n- Use \\[check_availability\\] to confirm available slots.\n- If there are more than 3 slots available, offer only the first 3.\n2.  Collect Patient Details:\n- After confirming availability, let the customer know that you know that he wants to schedule a video appointment with an anaesthetist.\n- Ask the customer to confirm his name\n3.  Create Appointment:\n- Use \\[create_appointment\\] with the collected [podId] and [customerName], and the chosen [timeSlot].\n\n**Completion:** Summarize actions performed (e.g., \u201c[customerName], Your appointment has been confirmed for [date/time].\u201d). Do not ask if the user needs anything else\n\n## 4. Response Guidelines\nFormatting Rules:\n- Provide clear, concise responses (e.g., \u201cDr. Smith is available at 10 AM. Would you like to book this slot?\u201d).\n- Use bullet points or short paragraphs for clarity.\nLanguage Style: Keep a polite and professional tone.\n\n## 5. Error Handling and Fallbacks\nClarification Prompts:\n- For unclear inputs: \u201cCould you confirm the preferred date and time for the appointment?\u201d\nFallback Responses:\n- If an action fails: \u201cI couldn\u2019t complete your request. Would you like to try again or contact support?\u201d\n\n## 6. User Defined Guardrails\n- Limit conversations to booking doctor appointments.\n- Do not provide medical advice or address unrelated queries.\n</code></pre> <p>It is a good practice to use markdown to get better results. In this link you will find guidelines and best practices for Webex AI Agents.</p> <p>Save your changes before moving on.</p>"},{"location":"04-ai-agent-create/#agent-actions","title":"Agent Actions","text":"<p>In this section, you will learn how to set up your agent to perform powerful actions, including interacting with external systems. We\u2019ll create one action to check for available video visit slots, and another to book a video visit for the selected slot.</p> <ol> <li> <p>Click on Actions. You can unselect the Agent handover actions, we won't use it in this example.</p> </li> <li> <p>Click on New action, and use these values:</p> <ul> <li>Action name <pre><code>check_availability\n</code></pre></li> <li>Action description <pre><code>Check for available slots based on user's preference\n</code></pre></li> <li>Action scope: Slot filling and fulfillment</li> </ul> </li> <li> <p>Click on new input entity</p> <p>With entities, we will ensure that the AI Agent gather all the needed information. For this action, we need to collect the preferred date and time, and also the PodId.</p> <p>NOTE: In a real deployment, you wouldn\u2019t ask the end customer for something like a Pod ID. For this lab, we\u2019ve built a shared calendaring system where each Pod ID has its own set of appointments.</p> <p>Setup the first identity:</p> <ul> <li>Entity Name <pre><code>podId\n</code></pre></li> <li> <p>Entity Type: String</p> </li> <li> <p>Entity Description </p><pre><code>String identifying the pod. It should be something like PODX\n</code></pre><p></p> </li> </ul> <p>Add two Entity Examples, like POD1 and POD23:</p> <p></p> <p>The field Required should be Yes, click Add to finish the input setup.</p> </li> <li> <p>Click on new input entity again to setup the preferred date identity:</p> <ul> <li>Entity Name <pre><code>preferredDate\n</code></pre></li> <li> <p>Entity Type: Date</p> </li> <li> <p>Entity Description </p><pre><code>User\u2019s preferred date in the given format\n</code></pre><p></p> </li> <li>Value: YYYY-mm-dd</li> </ul> <p>The field Required should be Yes, click Add to finish the input setup.</p> </li> <li> <p>Click on new input entity to define preferred time:</p> <ul> <li>Entity Name <pre><code>preferredTime\n</code></pre></li> <li>Entity Type: Time</li> <li>Entity Description <pre><code>User\u2019s preferred time\n</code></pre></li> <li>Value <pre><code>hh:mm\n</code></pre> Add two Entity Examples, like 10:00 and 14:30.</li> </ul> <p>The field Required should be Yes, click Add to finish the input setup</p> <p>Now, Your check_availabilty Action setup page should look like this:</p> <p></p> </li> <li> <p>Go to Webex Connect Flow Builder Fulfillment at the bottom of the page. Select the Fullfillment Flows Service and the Check Availability Flow. Click on -&gt;Add</p> <p>To save you time, these flows have been preloaded into the system. You can read a description later in the lab, in the Fulfillment Flows section.</p> </li> <li> <p>Now it is time to repeat the process for the Action that will effectively Create the booking in the calendaring system. Go back to the Actions section, and click New action</p> </li> <li> <p>Use these values:</p> <ul> <li>Action name <pre><code>create_appointment\n</code></pre></li> <li>Action description <pre><code>Create appointment using available timeSlot and podId, and by collecting customerName\n</code></pre></li> <li>Action scope: Slot filling and fulfillment</li> </ul> </li> <li> <p>Click on new input entity </p> <p>Setup the first identity, the customer name:</p> <ul> <li>Entity Name <pre><code>customerName\n</code></pre></li> <li> <p>Entity Type: String</p> </li> <li> <p>Entity Description </p><pre><code>Name of the patient\n</code></pre>     The field Required should be Yes, click Add to finish the input setup.<p></p> </li> </ul> </li> <li> <p>Click on new input entity again to setup the podId identity:</p> <ul> <li>Entity Name <pre><code>podId\n</code></pre></li> <li> <p>Entity Type: String</p> </li> <li> <p>Entity Description </p><pre><code>String identifying the pod. It should be something like PODX\n</code></pre><p></p> </li> </ul> <p>Add two Entity Examples, like POD1 and POD23. The field Required should be Yes, click Add to finish the input setup.</p> </li> <li> <p>Click on new input entity to define time slot for the video visit:</p> <ul> <li>Entity Name <pre><code>timeSlot\n</code></pre></li> <li>Entity Type: String</li> <li>Entity Description <pre><code>Date and time of the available slot\n</code></pre></li> </ul> <p>The field Required should be Yes, click Add to finish the input setup</p> <p>Now, Your create_appointment Action setup page should look like this:</p> <p></p> </li> <li> <p>Go to Webex Connect Flow Builder Fulfillment at the bottom of the page. Select the Fullfillment Flows Service and the Create Appointment Flow.</p> </li> <li> <p>Click on -&gt;Add and Publish your Agent.</p> </li> </ol>"},{"location":"04-ai-agent-create/#fine-tuning-your-ai-agent","title":"Fine-tuning your AI Agent","text":"<p>You can test how your AI Agent works before you add it to any Flow. Go back to the AI Agent Studio, select your Bot, Click on \ud83d\udcac Preview, then choose Start a chat, and start the conversation with 'Hi'.</p> <p>Appointments can be booked any day in the week, from 9AM to 5PM.</p> <p>Learning how Webex AI Agent work is a important section of this lab, spend some time testing what you built if you like. Here you have some examples:</p> <ul> <li> <p>When trying to get the POD ID, Agent will offer examples (text: 'for example, POD1 or POD23'). This is taken from the 'Check availability' Action, Entity Name 'podId'. This is a good way to be sure that the Agent will use the right examples, but you may want more flexibility. You can try to remove the examples from the Entity setup and check what happens.</p> </li> <li> <p>Try different formats when choosing the appointment date. You can also try expressions like 'tomorrow at 5', 'in a week at noon', or 'next Monday at 15'. The scheduled API we built for the lab works with the typical '2025-10-25T12:00:00Z' date format, you do not need to worry about this, the AI Agent handle this for you.</p> </li> <li> <p>When you choose the preferred slot, try '1', or 'the second', etc.</p> </li> <li> <p>The Scheduling system API that we built for the lab will provide many slots, up to 15 for a full empty day (see the Fulfillment Flows section for more details). Try to modify the AI Agent instructions (this line: 'If there are more than 3 slots available, offer only the first 3') replacing '3' with '2', for example. Now the Agent should provide only two time slots! So, you were able to re-program the Agent without the need to write any code.</p> </li> <li> <p>You can see all the appointments that the AI Agent creates on your Appointments web page</p> </li> </ul> <p>\ud83c\udfaf Mission accomplished! Learn how to build a Webex AI Agent.</p>"},{"location":"05-backend/","title":"Backend preparation","text":""},{"location":"05-backend/#backend-preparation","title":"Backend Preparation","text":"<p>One of the objectives of this lab is to demonstrate how Webex Connect can retrieve and update relevant business information from backend systems such as databases, CRMs or EMRs.</p> <p>You have access to a mock up database for every POD where you can provision your own customers.</p>"},{"location":"05-backend/#access-your-customer-database","title":"Access your Customer Database","text":"<p>Go to this link, use your POD number (for example POD4) and an attendee email address (for example studentpod4@email.com). Click on 'Manage my Customers' to move on.</p> <p>NOTE: this attendee email address can be any, it won't be used later in the flow. It is used to keep POD's information isolated: you will have access only to your own customers, other lab attendees won't see your customer data. Do not share this email address with other lab attendees !!</p> <p>POD numbers are case sensitive!</p>"},{"location":"05-backend/#create-a-customer","title":"Create a customer","text":"<p>Click Add New Customer, type Name, Email and Mobile Number. Phone and Company are not mandatory and won't be used during the lab, you can add some values for demo purposes.</p> <ul> <li> <p>ATTENDEES WITH A US MOBILE NUMBER</p> <p>Mobile Number has to be real (do not add '+' sign), Email can be any, for example customerpodX@email.com, where X is your pod Number.</p> </li> <li> <p>ATTENDEES WITHOUT A US MOBILE NUMBER</p> <p>We will be sending Webex message to the customer, therefore Email has to be the email address for a real Webex user account.   Mobile Number can be anything.</p> </li> </ul>"},{"location":"05-backend/#check-your-database-record","title":"Check your Database record","text":"<p>You can get your new customer details using this API request:</p> <pre><code>curl --request GET \\\n  --url 'https://appointment-management-production-095a.up.railway.app/api/customers/search/?mobileNumber=12225556666&amp;email=customerpod4%40email.com' \\\n  --header 'content-type: application/json' \\\n  --header 'x-pod-id: POD4' \\\n  --header 'x-user-email: studentpod4@email.com'\n</code></pre> <ol> <li> <p>Import this CURL request into httpie, Bruno or Postman. If you are using httpie, copy the CURL request above, click on the '+' sign and choose Import:</p> <p></p> </li> <li> <p>Click on 'Text', and paste the copied CURL request.</p> </li> <li> <p>Click on 'Next...' and then on 'Import'</p> <p></p> </li> <li> <p>In Headers, use you POD number and attendee email. In the request URL (https://appointment-management-production-095a.up.railway.app/api/customers/search/?mobileNumber=12225556666&amp;email=customerpod4%40email.com), replace 12225556666 with the customer mobile number, and customerpod4%40email.com with the customer email.</p> </li> <li> <p>Click on send, the response should look like this:</p> <pre><code>{\n   \"podId\":\"POD4\",\n   \"userEmail\":\"studentpod4@email.com\",\n   \"adminMode\":false,\n   \"searchCriteria\":{\n      \"email\":\"customerpod4@email.com\",\n      \"mobileNumber\":\"12225556666\"\n   },\n   \"searchScope\":\"user_customers\",\n   \"matchingCustomers\":[\n      {\n         \"id\":\"791b0fe8-b5aa-4e18-8eb6-2076d3d20d8c\",\n         \"name\":\"Customer Pod4\",\n         \"email\":\"customerpod4@email.com\",\n         \"phone\":\"\",\n         \"mobileNumber\":\"12225556666\",\n         \"company\":\"\",\n         \"status\":\"active\",\n         \"createdBy\":\"studentpod4@email.com\",\n         \"createdAt\":\"2025-07-28T20:39:38.171Z\",\n         \"updatedAt\":\"2025-07-28T20:39:38.171Z\"\n      }\n   ],\n   \"totalMatches\":1,\n   \"totalSearched\":1\n}\n</code></pre> </li> </ol>"},{"location":"06-connectflow-01/","title":"Building the flow: Get customer data from CRM","text":""},{"location":"06-connectflow-01/#webex-connect-flow","title":"Webex Connect Flow","text":"<p>The objective is to create a Webex Connect flow for this healthcare use case. To save you time, part of the workflow has already been created in advance. We will see how to add the most relevant functionalities, and we will do it in sections:</p> <ol> <li>Introduction</li> <li>Get Customer Data from CRM</li> <li>Add the Webex AI Agent to the Flow</li> <li>Create and share the Webex Instant Connect Meeting Links</li> </ol>"},{"location":"06-connectflow-01/#introduction","title":"Introduction","text":"<p>This is the interaction flow:</p> <ul> <li>Customer name is read from CRM</li> <li>Surgery date is generated</li> <li>Surgery reminder is sent</li> <li>Video Consultation is scheduled with a specialist. This process is handled by a Webex AI Autonomous Agent</li> <li>Video with instructions is sent to the customer</li> <li>Webex Instant Connect meeting links are created, and shared with the customer and the expert just before the meeting begins</li> <li>Customer and expert join the meeting</li> </ul>"},{"location":"06-connectflow-01/#get-customer-data-from-crm","title":"Get Customer Data from CRM","text":"<ol> <li> <p>Download this flow.</p> </li> <li> <p>Log in Control Hub (https://admin.webex.com) with you Webex Contact Center tenant administrator credentials, go to Services, Contact Center:</p> <p></p> <p>In the Quick Links section on the right, click on Webex Connect </p> </li> <li> <p>Go to Services:</p> <p></p> <p>Select the Services for your POD, click on Flows and then on Create Flow. From the Method drop-down menu, choose Upload a Flow, and select the Flow that you downloaded.   For the Flow name, choose <code>Healthcare Main Flow</code>. Click on Create.</p> </li> <li> <p>Click on Create new event, and choose as Name <code>podX-main-flow</code> where X is your POD number.</p> </li> <li> <p>In the PROVIDE SAMPLE INPUT, paste this:</p> <pre><code>{\n   \"channel\": \"\",\n   \"mobileNumber\": \"\",\n   \"customerEmail\": \"\"\n}\n</code></pre> <p></p> </li> <li> <p>Click on Parse and Save</p> </li> <li> <p>Add an HTTP Request node to the canvas, and connect it to the first Node Configure Webhook . We will use this node to retrieve the customer name from the customers data base. You will find this node in the Connect pallette on the right side of the screen, and you can connect it to the Configure Webhook node by selecting the green bubble and dragging the line until the HTTP Request node. Double-click the node to set it up:</p> <ul> <li> <p>For Method select: <code>GET</code></p> </li> <li> <p>For Endpoint URL, type:       </p><pre><code>$(crmAPIEndpoint)/customers/search/?mobileNumber=$(mobileNumber)&amp;email=$(customerEmail)\n</code></pre>   This is an example of the use of Variables inside Connect. You can easily access them in the Input Variables, Custom Variables section on the right.<p></p> </li> <li> <p>Configure your headers as in the following image:</p> <p></p> <p>Where <code>x-pod-id</code> is your POD number, and <code>x-user-email</code>is the attendee email of your choice</p> </li> <li> <p>Rename this http request node to something like 'Get Customer Name from CRM' (edit the text at the top of the window, and click the green tick symbol) and Save.</p> </li> </ul> </li> <li> <p>Add a Data Parser node, and connect it to the HTTP Request Node. This will allow you to parse the data received from the customer data base to be used later in any node in the flow. Double click it to set it up:</p> <ul> <li> <p>For Input: Import Data From: under the Input Variables section to the right, select the <code>http.responseBody</code> variable from the previous HTTP Request node 'Get Customer Name From' configured in the previous step.</p> </li> <li> <p>Now, we will populate Sample Body (optional) with some JSON that exemplifies the data we expect to be parsing.</p> <p>There are different ways to get such sample data. Usually, there are examples available on the documentation of the CRM/backend system you want to integrate with; or, you could use the 'Test' option of the http request node.</p> <p>Here, we will use this sample JSON:     </p><pre><code>{\n   \"podId\":\"POD4\",\n   \"userEmail\":\"studentpod4@email.com\",\n   \"adminMode\":false,\n   \"searchCriteria\": {\n      \"email\":\"customerpod4@email.com\",\n      \"mobileNumber\":\"12225556666\"\n   },\n   \"searchScope\":\"user_customers\",\n   \"matchingCustomers\":[{\n      \"id\":\"791b0fe8-b5aa-4e18-8eb6-2076d3d20d8c\",\n      \"name\":\"Customer Pod4\",\n      \"email\":\"customerpod4@email.com\",\n      \"phone\":\"\",\n      \"mobileNumber\":\"12225556666\",\n      \"company\":\"\",\n      \"status\":\"active\",\n      \"createdBy\":\"studentpod4@email.com\",\n      \"createdAt\":\"2025-07-28T20:39:38.171Z\",\n      \"updatedAt\":\"2025-07-28T20:39:38.171Z\"\n   }],\n   \"totalMatches\":1,\n   \"totalSearched\":1\n}\n</code></pre><p></p> <p>(The actual key values are not important, and could be anything or even empty.) </p> <p>Copy/paste the JSON into the Sample Body (optional) / PROVIDE SAMPLE INPUT field, and click PARSE.</p> <p>Under SELECT OUTPUT VARIABLES, choose <code>$.matchingCustomers[0].name</code> anc click Import</p> </li> <li> <p>Go ahead and give this variable the 'Output Variable Name' <code>customerName</code></p> <p></p> </li> <li> <p>Rename the node to 'Parse Response', and click on Save.</p> </li> </ul> </li> <li> <p>Let's learn now about a very powerful Webex Connect feature: how to modify variables.</p> <ul> <li> <p>Double-click on this very same 'Parse Response' Data Parser node that we created, and select Transition Actions (Optional)</p> </li> <li> <p>Add a new action</p> </li> <li> <p>Under Action 1, select:      Time = <code>On-leave</code></p> <p>Action = <code>Set variable</code>  Variable: choose <code>customerName</code>, and as Value type <code>$(n101.customerName)</code></p> <p>Note that the node numbers maybe different. You can access the right value under Output Variables:</p> <p></p> </li> <li> <p>Add another On-leave Action, this time choose <code>[Debug] Log a Value to transaction log</code>. For the <code>Log Id</code> you can use '1001', and <code>$(customerName)</code> for the value. This will help you troubleshooting the flow if needed.</p> <p></p> </li> </ul> </li> <li> <p>Before you move to the next section, connect this 'Parse Response' node to the existing node named 'Get Surgery Date'. Save your Flow.</p> </li> </ol> <p>\ud83c\udfaf Mission accomplished! Learn how to integrate Webex Connect with external databases</p>"},{"location":"07-connectflow-02-ai-agent/","title":"Building the flow: Add the AI Agent","text":""},{"location":"07-connectflow-02-ai-agent/#add-the-webex-ai-agent-to-the-main-flow","title":"Add the Webex AI Agent to the main Flow","text":"<p>In this section you will learn how to add a Webex AI agent into any Connect Flow to serve digital channels. You will do it step by step to understand the process.</p>"},{"location":"07-connectflow-02-ai-agent/#ai-agent-node","title":"AI Agent Node","text":"<ol> <li> <p>Go back to Webex Connect, click on Services, select your POD, access your Flows and select your 'Healthcare Main Flow' Flow. Create a Custom Variable, name it messageToAgent and choose 'Hi' as the Default Value</p> <p>You can configure your Custom Variables in Settings, on the top-right part of the screen:</p> <p></p> </li> <li> <p>Go the Node Pallette on the left side of the screen, select the AI Agent node:</p> <p></p> <p>and add it to the Canvas. Connect it to the Branch Node named 'Yes or No' (after the Branch node):</p> <p></p> </li> <li> <p>Double click on the node to set it up:</p> <p></p> <p>On the AGENT drop-down menu, choose the AI Agent that you have created (podX-AIAgent). Notice that the messageToAgent Custom Variable will trigger the Agent. Click on Save.</p> </li> </ol>"},{"location":"07-connectflow-02-ai-agent/#working-with-end-customer-messages","title":"Working with end customer messages","text":"<ol> <li> <p>Now the next step is to use the response generated by the Agent and send it back to the customer.</p> <ul> <li>Select any of the SMS Nodes that you already have in the flow, copy and paste it.</li> <li>Connect it to the AI Agent Node, choosing the onSuccess Event.</li> <li>Double click on this new SMS Node to set it up.</li> <li> <p>Rename it to something like Agent Message, and choose these values:</p> <p>NOTE: as From Number you can choose any of the two numbers available. Once you choose one, use always the same. Do not use 'CONNCT'.</p> </li> </ul> <p></p> <p>Depending on the order you followed during the lab, what you see on the screen might be slightly different. Normally, you will see the AI Agent node as the last one in the list of nodes on the right. Remember that you can always check the node numbers by clicking the Debug button.</p> <p></p> <p>Click Save.</p> </li> <li> <p>Select any of the Receive nodes that you already have in the flow, copy and paste it. Connect it to the 'Agent Message' previous SMS Node.</p> </li> <li> <p>This Receive Node will get the end customer question/message. Now we need to send it back to the Agent. Double click the Receive Node, and add a Transition Action like this:</p> <p></p> <p>Be sure that the variable node number (97 in this example in <code>$(n97.receive.message)</code> ) is the same as the Receive Node number at the bottom left. You can access the right value under Output Variables on the right.</p> <p>With these steps, you will be taking the customer SMS message text and sending it back to the AI Agent.</p> <p>Click on Save.</p> </li> <li> <p>Select the Receive Node Outcome (green circle), and connect it to the AI Agent Node. You should get something like this:</p> <p></p> <p>If you tested now the Flow it would work, but the conversation would never end. We need to add a way to determine that the video visit was scheduled, and move to the next step which is sharing a video with the end customer. You will do it now in the next section, now it is a good moment to Save your Flow!</p> </li> </ol>"},{"location":"07-connectflow-02-ai-agent/#ending-the-conversation-with-the-ai-agent","title":"Ending the conversation with the AI Agent","text":"<ol> <li> <p>Remove the connection between the AI Agent Node, and the 'Agent Message' SMS Node. You do this by selecting the connection and clicking on the Delete button on the bottom of the Flow Editor canvas.</p> </li> <li> <p>Add a new Branch Node, connect it to the AI Agent Node (on_Success branch), and configure it like this:</p> <p></p> <p>Click Save.</p> </li> <li> <p>Connect this 'Check if AI Agent is done' Branch Node to the existing SMS node named 'Thanks'. Choose the 'Yes' Event.</p> </li> <li> <p>Go back to the 'Check if AI Agent is done' Branch Node, and now connect the None of the above Event to the 'Agent Message' SMS Node. Now, this section of the Flow should look like something like this:</p> <p></p> <p>As you can see, we didn\u2019t build this section of the flow in the same order as the nodes appear now, but hopefully this helped you better understand the process.</p> <p>Now you only need to add error and time out control, you will do it in the following section.</p> </li> </ol>"},{"location":"07-connectflow-02-ai-agent/#controlling-response-timeouts-and-session-errors","title":"Controlling response timeouts and session errors","text":"<ol> <li> <p>Select any of the existing 'Time Out' SMS nodes that you already have in the flow, copy and paste it. Connect it to the Orange output (On Timeout) of the Receive Node you recently added.</p> </li> <li> <p>Paste one more 'Time Out' SMS node, and connect it to the Orange output (On Timeout) of the AI Agent Node.</p> </li> <li> <p>Add a new AI Agent Node to the Canvas. Connect all the previous AI Agent node RED outputs to this new AI Agent node (onInvalidData, onError, onInvalidChoice, onFailure).</p> </li> <li> <p>Double click on it to set it up:</p> <p></p> <p>You gave to choose your POD bot, and node numbers may be different for you.</p> </li> <li> <p>Connect the last 'Time Out' SMS node (green bubble) that you created to this 'Closing Session' AI Agent Node.</p> <p>This section of the flow should look like this:</p> <p></p> <p>NOTE: you could use only one 'Time Out' Node if you wanted, we chose to have two to make the flow easier to follow</p> </li> </ol> <p>\ud83c\udfaf Mission accomplished! Learn how to add a Webex AI Agent to a digital channel conversation.</p>"},{"location":"075-fullfillment-flows/","title":"Fulfillment Flows","text":""},{"location":"075-fullfillment-flows/#fulfillment-flows","title":"Fulfillment Flows","text":"<p>These flows have been already created to save you time, let's have a look at how they were designed.</p>"},{"location":"075-fullfillment-flows/#check-availability-flow","title":"Check availability Flow","text":"<p>The flow will receive as input the POD ID, the preferred date and the preferred time:</p> <p></p> <p>The 'Check Available Slots' Http Request Node will get the available slots, that could be many. This is an example of the API response for a full empty day:</p> <p></p><pre><code>{\n  \"podId\": \"POD1\",\n  \"searchCriteria\": {\n    \"date\": \"2025-09-25\",\n    \"startTime\": \"09:00\",\n    \"endTime\": \"17:00\",\n    \"duration\": 60,\n    \"interval\": 30\n  },\n  \"availableSlots\": [\n    {\n      \"startTime\": \"2025-09-25T09:00:00.000Z\",\n      \"endTime\": \"2025-09-25T10:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T09:30:00.000Z\",\n      \"endTime\": \"2025-09-25T10:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T10:00:00.000Z\",\n      \"endTime\": \"2025-09-25T11:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T10:30:00.000Z\",\n      \"endTime\": \"2025-09-25T11:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T11:00:00.000Z\",\n      \"endTime\": \"2025-09-25T12:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T11:30:00.000Z\",\n      \"endTime\": \"2025-09-25T12:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T12:00:00.000Z\",\n      \"endTime\": \"2025-09-25T13:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T12:30:00.000Z\",\n      \"endTime\": \"2025-09-25T13:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T13:00:00.000Z\",\n      \"endTime\": \"2025-09-25T14:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T13:30:00.000Z\",\n      \"endTime\": \"2025-09-25T14:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T14:00:00.000Z\",\n      \"endTime\": \"2025-09-25T15:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T14:30:00.000Z\",\n      \"endTime\": \"2025-09-25T15:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T15:00:00.000Z\",\n      \"endTime\": \"2025-09-25T16:00:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T15:30:00.000Z\",\n      \"endTime\": \"2025-09-25T16:30:00.000Z\"\n    },\n    {\n      \"startTime\": \"2025-09-25T16:00:00.000Z\",\n      \"endTime\": \"2025-09-25T17:00:00.000Z\"\n    }\n  ],\n  \"totalSlots\": 15\n}\n</code></pre> As you saw in the previous Building your Webex AI Agent section, AI Agent is able to offer only the first 3 available slots using a simple instruction.<p></p> <p>The result of a fulfillment Flow is defined in Flow Settings \u2699\ufe0f , Flow Outcomes, OUTCOME, Last Execution Status :</p> <p></p>"},{"location":"075-fullfillment-flows/#create-appointment-flow","title":"Create appointment Flow","text":"<p>The flow will receive as input POD ID, the Customer Name and the date for the appointment:</p> <p></p> <p>The 'Create appointment' Http Request Node will create the appointment in the calendar system.</p>"},{"location":"08-connectflow-03-ic/","title":"Building the flow: Instant Connect meeting links","text":""},{"location":"08-connectflow-03-ic/#create-and-share-instant-connect-meeting-links","title":"Create and share Instant Connect Meeting Links","text":""},{"location":"08-connectflow-03-ic/#create-meeting-links","title":"Create Meeting Links","text":"<p>Similarly to what we did previously in the Webex Instant Connect API section , here we will create Webex Instant Connect meeting links.  However, instead of using curl/httpie we will use an HTTP Request node. </p> <ol> <li> <p>Go back to Webex Connect, and click on Services. Select your POD, access your Flows and then your 'Healthcare Main Flow' Flow. Click on the Settings wheel on the top right, and then Custom Variables. Find the variable named botToken and paste the value of the BOT token created in the Instant Connect API previous section.</p> </li> <li> <p>Add a new HTTP Request node to the canvas, and connect it to the  Delay node orange dot. You should find the Delay node almost at the end of the Flow:</p> <p></p> <p>Configure the node as shown below:</p> <p></p> <p>Here you have some of the values that you can copy-paste:</p> <ul> <li>Endpoint URL:     <pre><code>$(mtg-broker-url)/api/v2/joseencrypt\n</code></pre></li> <li> <p>Body:      </p><pre><code>{\n    \"jwt\": {\n    \"sub\": \"Video Call with your practitioner - $(n2.inboundWebhook.timestamp)\"\n    },\n    \"aud\": \"a4d886b0-979f-4e2c-a958-3e8c14605e51\",\n    \"provideShortUrls\": \"true\",\n    \"verticalType\": \"hc\",\n    \"loginUrlForHost\": false\n}\n</code></pre><p></p> <p>With the option <code>verticalType</code> = <code>hc</code> , Instant Connect user interface will be automatically customized for a Healthcare use case.</p> </li> <li> <p>Rename the node to 'Create meeting links' and Save it</p> </li> </ul> </li> <li> <p>Add a Data Parser node to the canvas, and connect it to the previous HTTP Request node.</p> <ul> <li>To get the value for Input: Import Data From, choose the <code>http.responseBody</code> variable from the <code>Create Meeting Links</code> HTTP Request node configured in the previous step:</li> </ul> <p></p> <p>Note: Node numbers may be different.</p> <ul> <li> <p>For the Sample Body, you can use the response body you got with curl, ot use the HTTP Request Node embedded Test option.</p> <p>Here you have on example that you can copy and paste: </p><pre><code>{\n    \"host\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJpNmZta3dp...cWl3ZGw2cjFuSkg0bEUj\",\n            \"short\": \"oCVp2LD\"\n        }\n    ],\n    \"guest\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJEQVdaHOBS...RDTvlZ-aLLRdIMSmCwEc\",\n            \"short\": \"ckmNR7I\"\n        }\n    ],\n    \"baseUrl\": \"https://instant.webex.com/visit/\"\n}\n</code></pre><p></p> </li> <li> <p>Click on Parse</p> </li> <li> <p>In this case you do not need to Select and IMPORT all the variables, <code>$.baseUrl</code>, <code>$.host[0].short</code> and <code>$.guest[0].short</code> are enough.</p> <p>Set the OUTPUT VARIABLE NAMES as shown below:</p> <p></p> <p>And Save the node.</p> </li> </ul> </li> <li> <p>Next, we will build variables containing the host and guest URLs. We can use again the embedded capabilities of Webex Connect nodes for this:</p> <ul> <li> <p>Edit the  Data Parse node we just created, and go to the Transition Actions (Optional) tab.</p> </li> <li> <p>Add an Action and set the value for two Custom Variables: <code>guestURL</code> and <code>hostURL</code>.</p> <p>The URL values are created by concatenating the <code>baseUrl</code> and the values in the <code>short</code> and <code>guest</code> keys on node leave.</p> <p></p> </li> </ul> <p>Note: Node numbers may be different.</p> <p>Click Save.</p> </li> </ol>"},{"location":"08-connectflow-03-ic/#send-link-to-customer","title":"Send link to customer","text":"<ol> <li> <p>Connect the Data Parser node to the 'Channel Selection' Branch Node that you should have at the end of the flow:</p> <p></p> </li> <li> <p>Double click on the SMS node named 'Send guest URL', and check the variable $(guestURL) is used to send the link to the customer.</p> </li> </ol>"},{"location":"08-connectflow-03-ic/#send-link-to-expert","title":"Send link to expert","text":"<p>Next, we will use the Webex messaging API to send a message from your Webex bot to the expert.</p> <ol> <li> <p>Choose your expert</p> <p>Go back again to Custom Variables (under the Settings wheel), and type the expert email address. This has to be the email address for a real Webex user account.</p> <p>In a real project, normally there will be a process or system in place to choose the best expert for a given customer or interaction. In this case, the expert is a static value.</p> <ul> <li> <p>ATTENDEES WITHOUT A US MOBILE NUMBER</p> <p>Because you may have used your regular Webex user account email address for the customer in the previous Backend Preparation section, you will need a second one for the expert. If you already have one, use it. If you do not, you can create one in here (Sign Up option), or if you prefer you can use your admin user (admin-podX@ai-services-lab.wbx.ai).</p> </li> </ul> </li> <li> <p>Add an HTTP Request node to the canvas, and connect it to the previous SMS node named 'Send guest URL'.</p> <ul> <li> <p>Configure the node as shown below:</p> <p></p> <p>Here you have some of the values that you can copy-paste:</p> <ul> <li>Body:     <pre><code>    {\n        \"toPersonEmail\":\"$(expertEmail)\",\n        \"text\":\"$(customerName) is waiting for you. Please click on this link to join the video session: $(hostURL)\"\n    } \n</code></pre></li> </ul> </li> <li> <p>Rename the node to 'Offer host URL to expert' and Save it</p> </li> </ul> <p>\ud83c\udfaf Mission accomplished! Learn how to integrate Webex Connect with Instant Connect to create the Instant Connect Meetings Links, and share them with the customer and the expert.</p> </li> </ol>"},{"location":"08-connectflow-03-ic/#section-for-non-us-attendees","title":"SECTION FOR NON US ATTENDEES","text":"<p>If you do not have a US mobile number, you can still test your flow.</p> <ol> <li> <p>Go to the Channel Selection Branch Node at the beginning of the Flow, and connect the 'Webex' outcome to the HTTP Request Node named Reminder-Webex Channel:</p> <p>Note: You may need to zoom out and go to the beginning of the flow)</p> <p></p> <p>The Webex AI Agent has been added in this Webex flow branch for you, you do not need to to it again. Now please go to the end of the flow, and connect the output of the 'Send guest URL - Webex' node to the 'Offer host URL to expert' node.</p> <p>You need to follow some more steps in order to use Webex as the channel for this use case:</p> </li> <li> <p>At the left side Webex Connect menu bar, click on Assets and Integrations (Save your Flow first!)</p> </li> <li> <p>Click on Add Integration and choose Inbound Webhook</p> </li> <li> <p>Choose a unique name, for example listener_podX, where X is your POD number.</p> </li> <li> <p>Copy the WebHook URL in a safe place (we will use <code>https://hooks.us.webexconnect.io/events/ASKAS3CYE5</code> in this example)</p> </li> <li> <p>Click on the Paste JSON tab, and paste:     </p><pre><code>{\n    \"id\": \"\",\n    \"name\": \"\",\n    \"targetUrl\": \"\",\n    \"resource\": \"\",\n    \"event\": \"\",\n    \"orgId\": \"\",\n    \"createdBy\": \"\",\n    \"appId\": \"\",\n    \"ownedBy\": \"\",\n    \"status\": \"\",\n    \"created\": \"\",\n    \"actorId\": \"\",\n    \"data\": {\n        \"id\": \"\",\n        \"roomId\": \"\",\n        \"roomType\": \"\",\n        \"personId\": \"\",\n        \"personEmail\": \"\",\n        \"created\": \"\"\n    }\n}\n</code></pre><p></p> </li> <li> <p>Click on Parse and Save</p> </li> <li> <p>Create a Webhook associated to your Bot. This Webhook will be 'listening' to all the messages sent to the Bot</p> <ul> <li> <p>Copy this CURL request:</p> <pre><code>curl --request POST \\\n--url https://webexapis.com/v1/webhooks \\\n--header 'authorization: Bearer YOUR_BOT_TOKEN' \\\n--header 'content-type: application/json' \\\n--data '{\n\"name\": \"Webex listener PODX\",\n\"targetUrl\": \"INBOUND_WEBHOOK_URL\",\n\"resource\": \"messages\",\n\"event\": \"created\"\n}'\n</code></pre> </li> <li> <p>Import it into httpie, Bruno or Postman, as you did in the previous section 'Backend Peparation'. Here we are showing how to do it with httpie:</p> </li> <li> <p>In Auth, replace YOUR_BOT_TOKEN with your bot Token. In the Body, replace INBOUND_WEBHOOK_URL with URL for the Inbound Webhook created above (<code>https://hooks.us.webexconnect.io/events/ASKAS3CYE5</code> in this example), and use your POD number:</p> </li> </ul> <p></p> <p>Click Send, You should get a response similar to  this: </p> <pre><code>{\"id\":\"Y2lzY29zcGFyazovL3VybjpURUFNOnVzLXdlc3QtMl9yL1dFQkhPT0svZWEwMmNkOTQtOWRjMy00ODIxLWI3NzUtMzFkYjgxNWIwODk5\",\n\"name\":\"Webex listener PODX\",\n\"targetUrl\":\"https://hooks.us.webexconnect.io/events/ASKAS3CYE5\",\n\"resource\":\"messages\",\n\"event\":\"created\",\n\"orgId\":\"Y2lzY29zcGFyazovL3VzL09SR0FOSVpBVElPTi8zMThlODNmYy1mM2FiLTRlZTYtYjdjMS0yODYwOGRmNGI3MTI\",\"createdBy\":\"Y2lzY29zcGFyazovL3VzL1BFT1BMRS9iMjMyZDQzZS1lZWY3LTRlMTctYjRjZC1mZGUzMDkzYWJiZTA\",\"appId\":\"Y2lzY29zcGFyazovL3VzL0FQUExJQ0FUSU9OL0MzMmM4MDc3NDBjNmU3ZGYxMWRhZjE2ZjIyOGRmNjI4YmJjYTQ5YmE1MmZlY2JiMmM3ZDUxNWNiNGEwY2M5MWFh\",\n\"ownedBy\":\"creator\",\n\"status\":\"active\",\n\"created\":\"2025-09-04T13:42:44.239Z\"}\n</code></pre> </li> <li> <p>Go back to Services, your POD Service, Flows, and Click on your 'Healthcare Main Flow' Flow.</p> </li> <li> <p>Find the two Receive nodes named 'Wait for message on Webhook' (bottom part of the flow, Webex branch) and edit both of them:</p> <p>Under Receive Custom Event, Custom Event, choose the Inbound Webhook created above (listener_podX in this example). Click Save.</p> <p>Make sure that these two receive nodes green outputs are connected to the next Data Parser node!</p> </li> </ol>"},{"location":"09-testing-flow/","title":"Testing the flow","text":""},{"location":"09-testing-flow/#testing-the-flow","title":"Testing the Flow","text":""},{"location":"09-testing-flow/#configure-the-link-for-the-instructions-video","title":"Configure the link for the instructions video","text":"<p>On Webex Connect, if you go to Tools, Smart Links, you will see that a smart link to the instructions video has been already created for you. This is another powerful Webex Connect feature, you can get more details here. Now, you still need to use this link in your flow.</p> <ol> <li> <p>Go back to your Flow, and search for an SMS node 'Video with instructions':</p> <p></p> </li> <li> <p>Double click to edit it, and choose the Smart Link in the Smart Link drop-down menu. This should automatically add a reference to the link in the Message Text:</p> <p></p> <p>Click Save.</p> </li> </ol>"},{"location":"09-testing-flow/#check-flow-errors","title":"Check flow errors","text":"<ul> <li> <p>Edit all your SMS nodes, and choose one of the available numbers in the From Number drop-down menu. Choose the same for all nodes.</p> </li> <li> <p>Edit all the Receive nodes that are connected to an SMS node: choose the same number in the Number drop-down menu that you chose before. Use '*' as Keyword.</p> </li> </ul> <p>IMPORTANT !! Attendees without a US Mobile Number should skip this next step:</p> <ul> <li>Edit all the Receive nodes that are connected to an HTTP Request node: in the Custom Event drop-down menu, choose all_pods_listener.</li> </ul>"},{"location":"09-testing-flow/#publish-the-flow","title":"Publish the Flow","text":"<p>Click on MAKE LIVE, add some comments (Optional) and click on Make Live again.</p>"},{"location":"09-testing-flow/#trigger-the-flow","title":"Trigger the Flow","text":"<ol> <li> <p>Click on the first Configure Webhook node in the flow, and copy the WebHook URL. We will use <code>https://hooks.us.webexconnect.io/events/TOONJ56GSA</code> as an example.</p> </li> <li> <p>Go to https://appointment-management-production-095a.up.railway.app/demo-start.html </p> <ul> <li> <p>ATTENDEES WITH A US MOBILE NUMBER</p> <p>Type your mobile number. This has to be a real working US mobile Number, and the same one you chose as the Customer mobile number in the previous Backend Preparation section.</p> <p>In the Webex Connect Webhook URL input filed, paste your WebHook URL (<code>https://hooks.us.webexconnect.io/events/TOONJ56GSA</code> in this example). Click Submit.</p> </li> <li> <p>ATTENDEES WITHOUT A US MOBILE NUMBER</p> <p>Type your email address. This has to be the same one you chose as the Customer email address in the previous Backend Preparation section. You can always check your customer data here.</p> <p>In the Webex Connect Webhook URL input filed, paste your WebHook URL (<code>https://hooks.us.webexconnect.io/events/TOONJ56GSA</code> in this example. Click Submit.</p> </li> </ul> <p></p> </li> </ol>"},{"location":"09-testing-flow/#follow-the-use-case","title":"Follow the use case","text":"<p>Now you can interact with the flow, and check how:</p> <ul> <li>Customer name is read from the database</li> <li>AI Agent helps you choosing your preferred date fot the video visit</li> <li>Video visit is scheduled, and links are sent to customer and expert</li> <li> <p>Customer and expert can join the video session</p> <p>To receive the message for the expert, you will need to log in web.webex.com using the email address you chose as expertEmail in your Flow.</p> <p>Attendees without a USA mobile number, will also need to log in as a customer, using the chosen customer email address.</p> </li> </ul>"},{"location":"conclusion/","title":"Related Sessions at Cisco Live","text":""},{"location":"conclusion/#related-sessions-at-cisco-live","title":"Related Sessions at Cisco Live","text":"<ul> <li>BRKXXX-1111 My friend's breakout session</li> </ul>"},{"location":"credentials/","title":"Lab credentials","text":""},{"location":"credentials/#lab-credentials","title":"Lab Credentials","text":""},{"location":"credentials/#webex-meetings-guest-2-guest-organization","title":"Webex Meetings Guest-2-Guest organization","text":"<p>Username: </p><pre><code>admin@aiserviceslab-5xmr.wbx.ai\n</code></pre> Ask the proctors for the password<p></p>"},{"location":"credentials/#webex-contact-center-tenant","title":"Webex Contact Center tenant","text":"<p>Username: </p><pre><code>admin-podX@ai-services-lab.wbx.ai\n</code></pre> Where X is your POD number. Please ask the proctors for the password<p></p>"},{"location":"lab1_getting_started/","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#lab-1-getting-started","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#section-1","title":"Section 1","text":"<p>Please use the following credentials to connect to device:</p> <code>IP Address</code> 1.1.1.1 <code>Username</code> admin <code>Password</code> C1sco123 <p>My content</p> <p>Note</p> <p>This is a note</p> <p>Cisco IOS code block:</p> <pre><code>hostname ABC\ninterface GigabitEthernet1\n ip address 122.1.1.1\n</code></pre> <p>Image:</p> <p></p>"},{"location":"lab1_getting_started/#section-2","title":"Section 2","text":"<p>More content</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab will give you an introduction to ...</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#lab-access","title":"Lab Access","text":"<p>From your workstation open an RDP (Remote Desktop) session to the following host named \"wkst1\":</p> <ul> <li>IP: 1.2.3.4</li> <li>Username: corp\\demouser</li> <li>Password: C1sco12345</li> </ul>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>This lab leverages Cisco dCloud ...</p>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"howToUse/admonition/","title":"Admonition","text":"<p>In addition to the stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"customFeatures","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  https://github.com/WebexCC-SA/LAB-2857.git</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>venv\\Scripts\\activate.ps1</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000 </p> <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>source venv/bin/activate</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>venv\\Scripts\\activate.ps1</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p> <p>In your terminal enter the following commands:</p> <p>source venv/bin/activate</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/references/","title":"References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing Your Changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""},{"location":"overrides/00-introduction/","title":"Introduction","text":""},{"location":"overrides/00-introduction/#introduction","title":"Introduction","text":"<p>Welcome to the How to improve customer interactions with video and AI hands-on lab!</p> <p> </p>"},{"location":"overrides/00-introduction/#objectives","title":"Objectives","text":"<p>At the end of this lab, you should be able to build a Webex Connect flow, ready to be used for a real business use case.</p> <p> </p> <p>In the process, you will: - Learn about Instant Connect and APIs - Learn advanced Webex Connect integration and messaging capabilities - Learn how to build a Webex AI Agent</p>"},{"location":"overrides/01-overview/","title":"Webex Instant Connect Overview","text":""},{"location":"overrides/01-overview/#webex-instant-connect-overview","title":"Webex Instant Connect Overview","text":"<p>Webex Instant Connect empowers organizations across all verticals to enhance customer service, by facilitating video communications between end-users and experts. There is no need to download or install any application or plugin, customers and experts can connect directly through a web browser on desktop or mobile devices.</p> <p></p> <p>The Webex Instant Connect API provides the flexibility to schedule these sessions from external backends like Customer-Managed Relationship Systems (CRMs) and Electronic Medical Records (EMR) portals. Communication is highly secure, ensuring that no private information is collected at any point.</p> <p>As a fully flexible platform, Webex Instant Connect can be utilized for B2C meetings in any industry. It also provides relevant functionalities in healthcare, including in-patient tele-consultation, hourly virtual rounding, family visitation, and others.</p> <p>For more information, visit:</p> <ul> <li> <p>Webex Instant Connect</p> </li> <li> <p>Webex Instant Connect @ Webex Help Center</p> </li> </ul>"},{"location":"overrides/02-activation/","title":"Webex Instant Connect configuration","text":""},{"location":"overrides/02-activation/#webex-instant-connect-configuration","title":"Webex Instant Connect configuration","text":"<p>Log in https://instant.webex.com as a Webex administrator in your Webex ORG, and:</p> <ol> <li> <p>Click on Begin Integration</p> </li> <li> <p>Click on Activate Instant Connect:</p> </li> </ol> <p></p> <p>Now we are ready to learn how to use Webex Instant Connect API!</p> <p>Note: Remember that you need to use a Guest-to-Guest Webex Meeting site, as described in this lab Introduction</p> <p>You can also configure Instant Connect appearance by adding your organization name and logo. For this healthcare example:</p> <ol> <li> <p>Go to Appearance, change the Organization Name. You can use, for example, 'Wellness Hospital'. </p> </li> <li> <p>Click on Change Logo, and use the pictures provided: small and big.</p> </li> </ol> <p></p> <ol> <li> <p>Log in Control Hub as an administrator, and click on Apps</p> </li> <li> <p>Select Service Apps, you should see a Service App named 'Instant Connect Service App' listed. Enable it by clicking on the Authorize toggle switch. If you have more than one webex site in your org, choose in what site you want to authorize the Service App</p> </li> <li> <p>Click on Save</p> </li> </ol>"},{"location":"overrides/03-instantconnectapi/","title":"Webex Instant Connect API","text":""},{"location":"overrides/03-instantconnectapi/#webex-instant-connect-api","title":"Webex Instant Connect API","text":"<p>Now, let's build Instant Connect (IC) meeting links programmatically.</p>"},{"location":"overrides/03-instantconnectapi/#get-an-access-token","title":"Get an Access Token","text":"<p>You will need a Webex API access token to make calls to the IC API. You have two options:</p> <ul> <li> <p>Your personal token for development purposes.</p> </li> <li> <p>A bot token for production use.</p> </li> </ul> <p>In this lab we will use a bot token.</p>"},{"location":"overrides/03-instantconnectapi/#create-your-bot","title":"Create your BOT","text":"<ol> <li> <p>Go to https://developer.webex.com/docs/bots, log is as a Webex administrator in your org, and click on Create a Bot</p> </li> <li> <p>Select your Bot name (for example 'Video Expert'), and an icon of your choice. </p> </li> <li> <p>Choose your bot username, this has to be unique. For example, you could do something 'lab-wx1-yourusername'</p> </li> <li> <p>App Hub Description: we won't be publishing this bot to App Hub, but it is a good practice to add a meaningful description that will help you remember the purpose of the bot. For example, you can type something like 'This is the bot used for my wx1 lab 2857: 'Webex Connect with Instant Connect for video customer interactions'</p> </li> <li> <p>Click on Add Bot and Copy your token!! to a safe place, we will use later:</p> </li> </ol> <p></p> <p>Note: Remember that you need to use a Guest-to-Guest Webex Meeting site, as described in this lab Introduction</p>"},{"location":"overrides/03-instantconnectapi/#create-the-meeting-links","title":"Create the Meeting Links","text":"<p>This section will provide meeting links for host (expert) and guest (end customer) users. You will use curl for this:</p> <ol> <li> <p>Open a Terminal session</p> </li> <li> <p>Copy/paste and run this command:</p> <p></p><pre><code>curl --location 'https://mtg-broker-a.wbx2.com/api/v2/joseencrypt' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer ZWJkZjc1Y2UtN2U3MS00MzkxLTljMzYtM2Q4MjNiYjczMDVmMjE2NjFjODctNDZm_P0A1_3e826b27-2854-4cef-90d7-47862c8eef5a' \\\n--data '{\n    \"jwt\": {\n        \"sub\": \"Instant Connect Meeting 5\"\n    },\n    \"aud\": \"a4d886b0-979f-4e2c-a958-3e8c14605e51\",\n    \"provideShortUrls\": true,\n    \"verticalType\": \"hc\",\n    \"loginUrlForHost\": false\n}'\n</code></pre> Body details:<p></p> </li> <li> <p><code>sub</code> (Subject) string value can be whatever you like as long as it is unique for each meeting.</p> </li> <li> <p><code>aud</code> indicates the audience for which the jwt is intended. In this case it is Cisco, and the value is always the same.</p> </li> <li> <p><code>jwt</code> with <code>sub</code> and <code>aud</code> are mandatory parameters, the rest are optional.</p> </li> <li> <p><code>provideShortUrls</code>: Default: <code>false</code>. If set to <code>true</code>, the response will have shortened data portions of the meeting URL. It will also contain a shortened base URL, you will learn later how to use this data.</p> </li> <li> <p><code>verticalType</code>: Default: <code>hc</code>. Currently takes two values, <code>gen</code> for general flow, and <code>hc</code> for healthcare flow.</p> </li> <li> <p><code>loginUrlForHost</code>: Default <code>true</code>. Relevant only if <code>provideShortUrls</code> is true. If set to <code>false</code>, the short URL for hosts will be non-login links which means the host won't have an option to login for the meeting.</p> <p>API response should be something like this: </p><pre><code>{\n    \"host\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJpNmZta3dp...cWl3ZGw2cjFuSkg0bEUj\",\n            \"short\": \"oCVp2LD\"\n        }\n    ],\n    \"guest\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJEQVdaHOBS...RDTvlZ-aLLRdIMSmCwEc\",\n            \"short\": \"ckmNR7I\"\n        }\n    ],\n    \"baseUrl\": \"https://instant.webex.com/visit/\"\n}\n</code></pre><p></p> <p>Note: Response has been formatted to make the documentation more understandable</p> <p>If you are not comfortable using the command line, there are other tools that you can use to create the request, such as Postman or Bruno, or https://httpie.io/app.</p> </li> </ol>"},{"location":"overrides/03-instantconnectapi/#construct-the-meeting-urls","title":"Construct the Meeting URLs","text":"<p>Forming the meeting links is as simple as taking the <code>baseUrl</code> value and concatenating the values in <code>short</code>.</p> <p>In this example, <code>https://instant.webex.com/visit/oCVp2LD</code> for the host and <code>https://instant.webex.com/visit/ckmNR7I</code> for the guest.</p> <p>Now you only need to share the host URL with the expert providing support, and the guest URL with the end customer asking for support !!</p> <p>This can be done by email, SMS, be integrated into some web portal, CRM, EMR, etc. In the next steps, you will learn how to do it in a digital channel like WhatsApp using Webex Connect.</p>"},{"location":"overrides/04-ai-agent-create/","title":"Building your AI Agent","text":""},{"location":"overrides/04-ai-agent-create/#building-your-ai-agent","title":"Building your AI Agent","text":"<p>In this section you will learn how to create an Autonomous Webex AI Agent.</p>"},{"location":"overrides/04-ai-agent-create/#agent-creation","title":"Agent Creation","text":"<ol> <li> <p>Log in Control Hub with your admin user, go to Services, Contact Center:</p> <p></p><p> </p><p></p> <p>In the Quick Links section on the right, click on Webex AI Agent to access AI Agent Studio.</p> </li> <li> <p>Click Create agent, Start from scratch and Next. Choose Autonomous</p> </li> <li> <p>Name your agent <code>PODX-Appointments</code>, where X is your POD number. Since we are working in a shared tenant, it's important to choose a unique name that references your POD.</p> <p>You do not need to change the System ID, and for AI engine choose the default Webex AI Pro 1.0</p> </li> <li> <p>Agent's goal</p> <p>Use this: ``` Assist users with booking doctor appointments by efficiently guiding them through the necessary steps. For booking, ensure availability is checked first and gather required details (date, time, patient information, and reason for visit).  ````</p> <p>And click Create.</p> </li> <li> <p>AI Agent Welcome message</p> </li> </ol> <p>Change it to something like: </p><pre><code>Hi there, how can I help you?\n</code></pre><p></p>"},{"location":"overrides/04-ai-agent-create/#agent-instructions","title":"Agent Instructions","text":"<p>This is one of the most important steps in the lab. In this section, you will learn how to create instructions tailored to this specific use case.</p> <p>Paste this text in the Instructions text box:</p> <p></p><pre><code>## 1. Identity\n**Role Definition**: You are a friendly and professional assistant for managing doctor appointments.\n**Tone and Demeanor**: Maintain a polite and empathetic tone while assisting users.\n\n## 2. Context\n**Background Information:** Users can only request to book video appointments. Each action depends on specific steps to ensure smooth execution.\n\n## 3. Task\n\n**Booking a video Appointment:**\n1.  Check Availability:\n- Ask for the [podId] first. Do not ask for the preferred time in the same message. Let the customer know that you expect it to be in this format: PODX\n- Ask for the preferred date and time.\n- Use \\[check_availability\\] to confirm available slots.\n- If there are more than 3 slots available, offer only the first 3\n2.  Collect Patient Details:\n- After confirming availability, let the customer know that you know that he wants to schedule a video appointment with an anaesthetist.\n- Ask the customer to confirm his name\n3.  Create Appointment:\n- Use \\[create_appointment\\] with the collected [podId] and [customerName], and the chosen [timeSlot].\n\n**Completion:** Summarize actions performed (e.g., \u201c[customerName], Your appointment has been confirmed for [date/time].\u201d). Do not ask if the user needs anything else\n\n## 4. Response Guidelines\nFormatting Rules:\n- Provide clear, concise responses (e.g., \u201cDr. Smith is available at 10 AM. Would you like to book this slot?\u201d).\n- Use bullet points or short paragraphs for clarity.\nLanguage Style: Keep a polite and professional tone.\n\n## 5. Error Handling and Fallbacks\nClarification Prompts:\n- For unclear inputs: \u201cCould you confirm the preferred date and time for the appointment?\u201d\nFallback Responses:\n- If an action fails: \u201cI couldn\u2019t complete your request. Would you like to try again or contact support?\u201d\n\n## 6. User Defined Guardrails\n- Limit conversations to booking doctor appointments.\n- Do not provide medical advice or address unrelated queries.\n</code></pre> It is a good practice to use markdown to get better results. In this link you will find guidelines and best practices for Webex AI Agents.<p></p>"},{"location":"overrides/04-ai-agent-create/#agent-actions","title":"Agent Actions","text":"<p>In this section, you will learn how to set up your agent to perform powerful actions, including interacting with external systems. We\u2019ll create one action to check for available video visit slots, and another to book a video visit for the selected slot.</p> <ol> <li> <p>Click on Actions. You can unselect the Agent handover actions, we won't use it in this example</p> </li> <li> <p>Click on New action, and use these values:</p> <ul> <li>Action name <pre><code>check_availability\n</code></pre></li> <li>Action description <pre><code>Check for available slots based on user's preference\n</code></pre></li> <li>Action scope: Slot filling and fulfillment</li> </ul> </li> <li> <p>Click on new input entity</p> <p>With entities, we will ensure that the AI Agent gather all the needed information. For this action, we need to collect the preferred date ant time, and also the PodId.</p> <p>NOTE: In a real deployment, you wouldn\u2019t ask the end customer for something like a Pod ID. For this lab, we\u2019ve built a shared calendaring system where each Pod ID has its own set of appointments.</p> <p>Setup the first identity:</p> <ul> <li>Entity Name     ```     podId     ````</li> <li> <p>Entity Type: String</p> </li> <li> <p>Entity Description </p><pre><code>String identifying the pod. It should be something like PODX\n</code></pre><p></p> </li> </ul> <p>Add two Entity Examples, like POD1 and POD23:</p> <p></p><p> </p><p></p> <p>The field Required should be Yes, click Add to finish the input setup.</p> </li> <li> <p>Click on new input entity again to setup the preferred date identity:</p> <ul> <li>Entity Name <pre><code>preferredDate\n</code></pre></li> <li> <p>Entity Type: Date</p> </li> <li> <p>Entity Description </p><pre><code>User\u2019s preferred date in the given format\n</code></pre><p></p> </li> <li>Value: YYYY-mm-dd</li> </ul> <p>The field Required should be Yes, click Add to finish the input setup.</p> </li> <li> <p>Click on new input entity to define preferred time:</p> <ul> <li>Entity Name <pre><code>preferredTime\n</code></pre></li> <li>Entity Type: String</li> <li>Entity Description <pre><code>User\u2019s preferred time\n</code></pre> Add two Entity Examples, like 10:00 and _14:30_:</li> </ul> <p>The field Required should be Yes, click Add to finish the input setup</p> <p>Now, Your check_availabilty Action setup page should look like this:</p> <p></p> </li> <li> <p>Go to Webex Connect Flow Builder Fulfillment at the bottom of the page. Select the Fulfillment Flows Service and the Check Availability Flow.</p> </li> </ol> <p>To save you time, these flows have been preloaded into the system.</p> <ol> <li> <p>Now it is time to repeat the process for the Action that will effectively Create the booking in the calendaring system. Go back to the Actions section, and click +New action*</p> </li> <li> <p>Use these values:</p> <ul> <li>Action name <pre><code>create_appointment\n</code></pre></li> <li>Action description <pre><code>Create appointment using available timeSlot and podId, and by collecting customerName\n</code></pre></li> <li>Action scope: Slot filling and fulfillment</li> </ul> </li> <li> <p>Click on new input entity </p> <p>Setup the first identity, the customer name:</p> <ul> <li>Entity Name <pre><code>customerName\n</code></pre></li> <li> <p>Entity Type: String</p> </li> <li> <p>Entity Description </p><pre><code>Name of the patient\n</code></pre>     The field Required should be Yes, click Add to finish the input setup.<p></p> </li> </ul> </li> <li> <p>Click on new input entity again to setup the podId identity:</p> <ul> <li>Entity Name     ```     podId     ````</li> <li> <p>Entity Type: String</p> </li> <li> <p>Entity Description </p><pre><code>String identifying the pod. It should be something like PODX\n</code></pre><p></p> </li> </ul> <p>Add two Entity Examples, like POD1 and POD23. The field Required should be Yes, click Add to finish the input setup.</p> </li> <li> <p>Click on new input entity to define time slot for the video visit:</p> <ul> <li>Entity Name <pre><code>timeSlot\n</code></pre></li> <li>Entity Type: String</li> <li>Entity Description <pre><code>Date and time of the available slot\n</code></pre> Add two Entity Examples, like 10:00 and _14:30_:</li> </ul> <p>The field Required should be Yes, click Add to finish the input setup</p> <p>Now, Your create_appointment Action setup page should look like this:</p> <p></p> </li> <li> <p>Go to Webex Connect Flow Builder Fulfillment at the bottom of the page. Select the Fulfillment Flows Service and the Create Appointment Flow.</p> </li> <li> <p>Click on Save to finish this section</p> </li> </ol> <p>\ud83c\udfaf Mission accomplished! Learn how to build a Webex AI Agent.</p>"},{"location":"overrides/05-backend/","title":"Backend Preparation","text":""},{"location":"overrides/05-backend/#backend-preparation","title":"Backend Preparation","text":"<p>One of the objectives of this lab is to demonstrate how Webex Connect can retrieve and update relevant business information from backend systems such as databases, CRMs or EMRs.</p> <p>You have access to a mock up database for every POD where you can provision your own customers</p>"},{"location":"overrides/05-backend/#access-your-customer-database","title":"Access your Customer Database","text":"<p>Go to this link, use your POD number (for example POD4) and an attendee email address (for example studentpod4@email.com)</p> <p>NOTE: this attendee email address can be any, it won't be used later in the flow. It is used to keep POD's information isolated: you will have access only to your own customers, other lab attendees won't see your customer data. Do not share this email address with other lab attendees !!</p>"},{"location":"overrides/05-backend/#create-a-customer","title":"Create a customer","text":"<p>Click Add New Customer, type Name, Email and Mobile Number. Phone and Company are not mandatory and won't be used during the lab, you can add some values for demo purposes.</p> <p>Example:</p> <ul> <li>Name = <code>Customer Pod4</code></li> <li>Email = <code>customerpod4@email.com</code></li> <li>Mobile Number = <code>12225556666</code></li> </ul> <p>Email and Mobile Number have to be real, they will be used later when we work on the Webex Connect Flow.</p>"},{"location":"overrides/05-backend/#check-your-database-record","title":"Check your Database record","text":"<p>You should be able to get your new customer details using this API request:</p> <pre><code>curl --request GET \\\n  --url 'https://appointment-management-production-095a.up.railway.app/api/customers/search/?mobileNumber=12225556666&amp;email=customerpod4%40email.com' \\\n  --header 'content-type: application/json' \\\n  --header 'x-pod-id: POD4' \\\n  --header 'x-user-email: studentpod4@email.com'\n</code></pre> <p>Replacing '12225556666' by your customer  Mobile Number, 'customerpod4%40email.com' by your customer Email, and studentpod4@email.com by your attendee email address.</p> <p>You should get and answer like this:</p> <pre><code>{\n   \"podId\":\"POD4\",\n   \"userEmail\":\"studentpod4@email.com\",\n   \"adminMode\":false,\n   \"searchCriteria\":{\n      \"email\":\"customerpod4@email.com\",\n      \"mobileNumber\":\"12225556666\"\n   },\n   \"searchScope\":\"user_customers\",\n   \"matchingCustomers\":[\n      {\n         \"id\":\"791b0fe8-b5aa-4e18-8eb6-2076d3d20d8c\",\n         \"name\":\"Customer Pod4\",\n         \"email\":\"customerpod4@email.com\",\n         \"phone\":\"\",\n         \"mobileNumber\":\"12225556666\",\n         \"company\":\"\",\n         \"status\":\"active\",\n         \"createdBy\":\"studentpod4@email.com\",\n         \"createdAt\":\"2025-07-28T20:39:38.171Z\",\n         \"updatedAt\":\"2025-07-28T20:39:38.171Z\"\n      }\n   ],\n   \"totalMatches\":1,\n   \"totalSearched\":1\n}\n</code></pre>"},{"location":"overrides/06-connectflow-01/","title":"Webex Connect Flow","text":""},{"location":"overrides/06-connectflow-01/#webex-connect-flow","title":"Webex Connect Flow","text":"<p>The objective is to create a Webex Connect flow for this healthcare use case. To save you time, part of the workflow has already been created in advance. We will see how to add the most relevant functionalities, and we will do it in sections:</p> <ol> <li>Introduction</li> <li>Get Customer Data from CRM</li> <li>Add the Webex AI Agent to the Flow</li> <li>Create and share the Webex Instant Connect Meeting Links</li> </ol>"},{"location":"overrides/06-connectflow-01/#introduction","title":"Introduction","text":"<p>This is the interaction flow:</p> <ul> <li>Customer name is read from CRM</li> <li>Surgery date is generated</li> <li>Surgery reminder is sent</li> <li>Video Consultation is scheduled with an specialist. This process is handled by a Webex AI Autonomous Agent</li> <li>Video with instructions is sent to the customer</li> <li>Webex Instant Connect meeting links are created, and shared with the customer and the expert just before the meeting begins</li> <li>CRM is updated, indicating that the customer requested the video escalation, and the specialist chosen (DO I KEEP THIS ??)</li> <li>Customer and expert join the meeting</li> </ul>"},{"location":"overrides/06-connectflow-01/#get-customer-data-from-crm","title":"Get Customer Data from CRM","text":"<ol> <li> <p>Log in Control Hub with your admin user, go to Services, Contact Center:</p> <p></p><p> </p><p></p> <p>In the Quick Links section on the right, click on Webex Connect </p> </li> <li> <p>Go to Services</p> </li> </ol> <p> </p> <p>Select the Services for you POD, and click on the flow named 'Healthcare Main Flow'</p> <ol> <li> <p>Add an HTTP Request node to the canvas, and connect it to the first Node Configure Webhook . We will use this node to retrieve the customer name from the customers data base.</p> <ul> <li>For Method select: <code>GET</code></li> </ul> </li> <li> <p>For Endpoint URL, type:        </p><pre><code>$(crmAPIEndpoint)/customers/search/?mobileNumber=$(mobileNumber)&amp;email=$(customerEmail)\n</code></pre>    This is an example of the use of Variables inside Connect. You can access easily access them in the Input Variables, Custom Variables section on the right<p></p> </li> <li> <p>Configure your headers as in the following image</p> <p></p> </li> </ol> <p>Where <code>x-pod-id</code> is your POD number, and <code>x-user-email</code>is the attendee email of your choice</p> <ul> <li> <p>Rename this http request node to something like 'Get Customer Name from CRM' and Save.</p> </li> <li> <p>Add a Data Parser node, and connect it to the HTTP Request Node. This will allow you to parse the data received from the customer data base to be used later in any node in the flow.</p> </li> <li> <p>For Input: Import Data From: under the Input Variables section to the right, select the <code>http.response.body</code> variable from the previous HTTP Request node 'Get Customer Name From' configured in the previous step:</p> <ul> <li> <p>Now, we will populate Sample Body (optional) with some JSON that exemplifies the data we expect to be parsing.</p> <p>There are different ways to get such sample data. Usually, there are examples available on the documentation of the CRM/backend system you want to integrate with; or, you could use the 'Test' option of the http request node.</p> <p>Here, we will use this sample JSON:  </p><pre><code>{\n   \"podId\":\"POD4\",\n   \"userEmail\":\"studentpod4@email.com\",\n   \"adminMode\":false,\n   \"searchCriteria\": {\n      \"email\":\"customerpod4@email.com\",\n      \"mobileNumber\":\"12225556666\"\n   },\n   \"searchScope\":\"user_customers\",\n   \"matchingCustomers\":[{\n      \"id\":\"791b0fe8-b5aa-4e18-8eb6-2076d3d20d8c\",\n      \"name\":\"Customer Pod4\",\n      \"email\":\"customerpod4@email.com\",\n      \"phone\":\"\",\n      \"mobileNumber\":\"12225556666\",\n      \"company\":\"\",\n      \"status\":\"active\",\n      \"createdBy\":\"studentpod4@email.com\",\n      \"createdAt\":\"2025-07-28T20:39:38.171Z\",\n      \"updatedAt\":\"2025-07-28T20:39:38.171Z\"\n   }],\n   \"totalMatches\":1,\n   \"totalSearched\":1\n}\n</code></pre><p></p> <p>(The actual key values are not important, and could be anything or even empty.) </p> <p>Copy/paste the JSON into the Sample Body (optional) / PROVIDE SAMPLE INPUT field, and click PARSE.</p> <p>Under SELECT OUTPUT VARIABLES, choose <code>$.matchingCustomers[0].name</code> anc click Import</p> </li> <li> <p>Go ahead and give this variable the 'Output Variable Name' <code>customerName</code></p> <p></p> </li> <li> <p>Rename the node to 'Parse Response', and click on Save.</p> </li> </ul> </li> <li> <p>Let's learn now about a very powerful Webex Connect feature: how to modify variables.</p> </li> <li> <p>Double-click on this very same 'Parse Response' Data Parser node that we created, and select Transaction Actions (Optional)</p> </li> <li> <p>Add a new action</p> </li> <li>Under Action 1, select:    Time = <code>On-leave</code></li> </ul> <p>Action = <code>Set variable</code>    Variable: choose <code>customerName</code> abs as Value type <code>$(n101.customerName)</code></p> <p>Note that the node numbers maybe different, and how you can access the output of this very same Receive node under Output Variables.</p> <ul> <li>Add another On-leave Action, this time choose <code>[Debug] Log a Value to transaction log</code>. For the of <code>Log Id</code> you can use '1001', and <code>$(customerName)</code> for the value. This will help you troubleshooting the flow if needed.</li> </ul> <p></p> <p>\ud83c\udfaf Mission accomplished! Learn how to integrate Webex Connect with external databases</p>"},{"location":"overrides/07-connectflow-02-ai-agent/","title":"Adding the Webex AI Agent to the main Flow","text":""},{"location":"overrides/07-connectflow-02-ai-agent/#adding-the-webex-ai-agent-to-the-main-flow","title":"Adding the Webex AI Agent to the main Flow","text":"<p>In this section you will learn how to add a Webex AI agent into any Connect Flow to serve digital channels. You will do it step by step to understand the process.</p>"},{"location":"overrides/07-connectflow-02-ai-agent/#ai-agent-node","title":"AI Agent Node","text":"<ol> <li> <p>Create a Custom Variable, name it messageToAgent and choose Hi as the Default Value</p> <p>You can configure your Custom Variables in Settings, on the top-right part of the screen:</p> <p></p> </li> <li> <p>Go the Node Pallette on the right side of teh screen, select the AI Agent node:</p> <p></p><p> </p><p></p> <p>and add it to the Canvas. Connect it to the Branch Node named 'Yes or No'</p> </li> <li> <p>Double click on the node to set it up:</p> <p></p> <p>On the AGENT drop-down. menu, choose the AI Agent that you have created. Notice that with the messageToAgent Custom Variable will trigger the Agent.</p> </li> </ol>"},{"location":"overrides/07-connectflow-02-ai-agent/#working-with-end-customer-messages","title":"Working with end customer messages","text":"<ol> <li> <p>Now the next step is to send the response generated by the Agent and send it back to the customer.</p> <ul> <li>Select any of the SMS Nodes that you already have in the flow, copy and paste it</li> <li>Connect it to the AI Agent Node, choosing the onSuccess Event</li> <li>Double click on this new SMS Node to set it up</li> <li>Rename it to something like Agent Message, and choose these values:</li> </ul> <p></p> <p>Depending on the order you followed during the lab, what you see on the screen might be slightly different. Normally, you will see the AI Agent node as the last one in the list of nodes on the right. Remember that you can always check the node numbers by clicking the Debug button</p> <p></p><p> </p><p></p> </li> <li> <p>Select any of the Receive nodes that you already have in the flow, copy and paste it. Connect it the 'Agent Message' previous SMS Node.</p> </li> <li> <p>This Receive Node will get the end customer question/message. Now we need to send it back to the Agent. Double click the Receive Node, and add a Transaction Action like this</p> <p></p> <p>Be sure that the variable node number (97 in this example in <code>$(n97.receive.message)</code> ) is the same as the Receive Node number at the bottom left. With this step, you are taking the customer SMS message text and sending it back to the AI Agent</p> </li> <li> <p>Select the Receive Node Outcome (green circle), and connect it to the AI Agent Node. You should get something like this:</p> <p></p> <p>If you tested now the Flow it would work, but the Flow would never go on, we need to add a way to determine that the Video visit was scheduled, and move to the nest step which is sharing a video with the end customer. You will do it now:</p> </li> </ol>"},{"location":"overrides/07-connectflow-02-ai-agent/#ending-the-conversation-with-the-ai-agent","title":"Ending the conversation with the AI Agent","text":"<ol> <li> <p>Remove the connection between the AI Agent Node, and the 'Agent Message' SMS Node. You do this by selecting the connection and clicking on the Delete button on the bottom of the Flow Editor canvas.</p> </li> <li> <p>Add a new Branch Node, connect it to the Agent AI Node, and configure it like this:</p> <p></p> </li> <li> <p>Connect the 'Check if AI Agent is done' Branch Node' to the existing SMS node named 'Thanks'. Choose the Yes Event</p> </li> <li> <p>Go back to the 'Check if AI Agent is done' Branch Node', and now connect the None of the above Event to the 'Agent Message' SMS Node. Now this section of the Flow should look like something like this:</p> <p></p> <p>As you can see, we didn\u2019t build this section of the flow in the same order as the nodes appear now, but hopefully this helped you better understand the process.</p> <p>Now you only need to add error and time out control, you will do it in the following section:</p> </li> </ol>"},{"location":"overrides/07-connectflow-02-ai-agent/#controlling-response-time-outs-and-session-errors","title":"Controlling response time outs and session errors","text":"<ol> <li> <p>Select any of the existing 'Time Out' SMS nodes that you already have in the flow, copy and paste it. Connect it to the Orange output (On Timeout) of the Receive Node you recently added.</p> </li> <li> <p>Paste one more 'Time Out' SMS node, and connect it to the Orange output (On Timeout) of the AI Agent Node</p> </li> <li> <p>Add a new AI Agent Node to the Canvas. Connect all the previous AI Agent node Red outputs to this new AI Agent node (onInvalidData, onError, onInvalidChoice, onFailure). Double click on it to set it up:</p> <p></p> </li> <li> <p>Connect the last 'Time Out' SMS node that you created to this 'Closing Session' AI Agent Node</p> <p>This section of the flow should look like this:</p> <p></p> <p>NOTE: you could use only one 'Time Out' Node if you wanted, we chose to have two to make the flow easier to follow</p> </li> </ol> <p>\ud83c\udfaf Mission accomplished! Learn how to add a Webex AI Agent to a digital channel conversation.</p>"},{"location":"overrides/08-connectflow-03-ic/","title":"Create and share Instant Connect Meeting Links","text":""},{"location":"overrides/08-connectflow-03-ic/#create-and-share-instant-connect-meeting-links","title":"Create and share Instant Connect Meeting Links","text":""},{"location":"overrides/08-connectflow-03-ic/#create-meeting-links","title":"Create Meeting Links","text":"<p>Similarly to what we did previously in the Webex Instant Connect API section , here we will create Webex Instant Connect meeting links.  However, instead of using curl we will use an HTTP Request node. </p> <ol> <li> <p>Add a new HTTP Request node to the canvas, and connect it to the  Delay node orange dot</p> </li> <li> <p>Configure the node as shown below:</p> <p></p> <p>Here you have some of the values that you can copy-paste:</p> <ul> <li>Endpoint URL:     <pre><code>$(mtg-broker-url)/api/v2/joseencrypt\n</code></pre></li> <li> <p>Body:      ```     {         \"jwt\": {         \"sub\": \"Video Call with your practitioner - $(n2.whatsapp.timestamp)\"         },         \"aud\": \"a4d886b0-979f-4e2c-a958-3e8c14605e51\",         \"provideShortUrls\": \"true\",         \"verticalType\": \"hc\",         \"loginUrlForHost\": false     }     ````</p> <p>With the option <code>verticalType</code> = <code>hc</code> , Instant Connect user interface will be automatically customized for a Healthcare use case.</p> </li> </ul> </li> <li> <p>Rename the node to 'Create meeting links' and Save it</p> </li> <li> <p>Add a Data Parser node to the canvas, and connect it to the previous HTTP Request node</p> </li> <li> <p>To get the value for Input: Import Data From, chooe the <code>http.response.body</code> variable from the <code>Create Meeting Links</code> HTTP Request node configured in the previous step:</p> </li> </ol> <p></p> <p>Note: Node numbers may be different.</p> <ul> <li> <p>For the Sample Body, you can use the response body you got with curl, ot use the http request node Test option.</p> <p>Here you have on example that you can copy and paste: </p><pre><code>{\n    \"host\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJpNmZta3dp...cWl3ZGw2cjFuSkg0bEUj\",\n            \"short\": \"oCVp2LD\"\n        }\n    ],\n    \"guest\": [\n        {\n            \"cipher\": \"eyJwMnMiOiJEQVdaHOBS...RDTvlZ-aLLRdIMSmCwEc\",\n            \"short\": \"ckmNR7I\"\n        }\n    ],\n    \"baseUrl\": \"https://instant.webex.com/visit/\"\n}\n</code></pre><p></p> </li> <li> <p>Click on Parse</p> </li> <li> <p>In this case you do not need to Select and IMPORT all the variables, <code>$.baseUrl</code>, <code>$.host[0].short</code> and <code>$.guest[0].short</code> are enough.</p> <p>Set the OUTPUT VARIABLE NAMES as shown below:</p> <p></p> <p>And Save the node</p> </li> <li> <p>Next, we will build variables containing the host and guest URLs. We can use again the embedded capabilities of Webex Connect nodes for this:</p> </li> <li> <p>Edit the  Data Parse node we just created, and go to the Transition Actions (Optional) tab.</p> </li> <li> <p>As we did in Webex Connect Flow: Meeting Scheduling section, add an Action and create two Custom Variables: <code>guestURL</code> and <code>hostURL</code>.</p> <p>The URL values are created by concatenating the <code>baseUrl</code> and the values in the <code>short</code> and <code>guest</code> keys on node leave.</p> </li> </ul> <p></p> <p>Note: Node numbers may be different.</p>"},{"location":"overrides/08-connectflow-03-ic/#send-link-to-customer","title":"Send link to customer","text":"<ol> <li> <p>Copy any of the SMS nodes in the flow, copy and paste it, and connect it to the previous Data Parser node</p> </li> <li> <p>Change the Message to:     </p><pre><code>Hi $(customerName), you can join your video appointment in this link: $(guestURL)\n</code></pre><p></p> </li> <li> <p>Rename the node to 'Offer guest URL to customer' and Save it</p> </li> </ol>"},{"location":"overrides/08-connectflow-03-ic/#send-link-to-expert","title":"Send link to expert","text":"<p>Next we will use the Webex messaging API to send a message from your Webex bot to the expert.</p> <ol> <li> <p>Choose your expert</p> <p>Go to Custom Variables, and type the expert email address. The Webex message will be sent to this address</p> <p>In a real project, normally there will be a process or system in place to choose the best expert for a given customer or interaction. In this case, the expert is a static value.</p> </li> <li> <p>Add an HTTP Request node to the canvas, and connect it to the previous SMS node.</p> <ul> <li> <p>Configure the node as shown below:</p> <p></p> <p>Here you have some of the values that you can copy-paste:</p> <ul> <li>Body:     <pre><code>    {\n        \"toPersonEmail\":\"$(expertEmail)\",\n        \"text\":\"$(customerName) is waiting for you. Please click on this link to join the video session: $(hostURL)\"\n    } \n</code></pre></li> </ul> </li> <li> <p>Rename the node to 'Offer host URL to expert' and Save it</p> </li> </ul> <p>\ud83c\udfaf Mission accomplished! Learn how to integrate Webex Connect with Instant Connect to create the Instant Connect Meetings Links, and share them with the customer and the expert.</p> </li> </ol>"},{"location":"overrides/08-connectflow-03-ic/#section-for-non-us-attendees","title":"SECTION FOR NON US ATTENDEES","text":"<p>If you do not have a US mobile number, you can still test your flow.</p> <ol> <li> <p>Go to the Channel Selection Branch Node, and connect the 'Webex' outcome to the HTTP Request Node named Reminder-Webex Channel </p> <p></p> </li> </ol> <p>The Webex AI Agent has been added in this Webex flow branch for you, you do not need to to it again.</p>"},{"location":"overrides/09-testing-flow/","title":"Testing the Flow","text":""},{"location":"overrides/09-testing-flow/#testing-the-flow","title":"Testing the Flow","text":""},{"location":"overrides/09-testing-flow/#publish-the-flow","title":"Publish the Flow","text":"<p>Click on MAKE LIVE, add some comments (Optional) and click on Make Live again.</p>"},{"location":"overrides/09-testing-flow/#trigger-the-flow","title":"Trigger the Flow","text":"<ol> <li> <p>Click on the first Configure Webhook node in the flow, and copy the WebHook URL. We will use <code>https://hooks.us.webexconnect.io/events/TOONJ56GSA</code> as an example</p> </li> <li> <p>Go to https://appointment-management-production-095a.up.railway.app/demo-start.html </p> <ul> <li> <p>ATTENDEES WITH US MOBILE NUMBER</p> <p>Type your mobile number. This has to be a real working US mobile Number, the same one you chose as the Customer mobile number in the previous Backend Preparation section.</p> <p>In the Webex Connect Webhook URL input filed, paste your WebHook URL (<code>https://hooks.us.webexconnect.io/events/TOONJ56GSA</code> in this example). Click Submit.</p> </li> <li> <p>ATTENDEES WITHOUT US MOBILE NUMBER</p> <p>Type your email address. This has to be a real working email address, the same one you chose as the Customer email address in the previous Backend Preparation section.</p> <p>In the Webex Connect Webhook URL input filed, paste your WebHook URL (<code>https://hooks.us.webexconnect.io/events/TOONJ56GSA</code> in this example. Click Submit.</p> </li> </ul> <p></p> </li> </ol>"},{"location":"overrides/09-testing-flow/#follow-the-use-case","title":"Follow the use case","text":"<p>Now you can interact with the flow, and check how:</p> <ul> <li>Customer name is read from the database</li> <li>AI Agent helps you choosing your preferred date for the video visit</li> <li>Video visit is scheduled, and links are sent to customer and expert</li> <li>Customer and expert can join the video session</li> </ul>"}]}